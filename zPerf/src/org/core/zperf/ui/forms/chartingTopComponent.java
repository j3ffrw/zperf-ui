/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.core.zperf.ui.forms;

import info.monitorenter.gui.chart.ITrace2D;
import info.monitorenter.gui.chart.pointpainters.PointPainterDisc;
import info.monitorenter.gui.util.ColorIterator;
import java.awt.BasicStroke;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import org.core.zperf.CustomFileFilter;
import org.core.zperf.ZPerfUiTopComponent;
import org.core.zperf.ZapCCDFParser;
import org.core.zperf.ZapUserSettings;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//org.core.zperf.ui.forms//charting//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "chartingTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.core.zperf.ui.forms.chartingTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_chartingAction",
preferredID = "chartingTopComponent")
@Messages({
    "CTL_chartingAction=Charts",
    "CTL_chartingTopComponent=Charts Window",
    "HINT_chartingTopComponent=Graph your zap trace here"
})
public final class chartingTopComponent extends TopComponent {

    public chartingTopComponent() {
        
        this.zapUserSettings = ZPerfUiTopComponent.zapUserSettings;
        
        try {
            UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        } catch (InstantiationException ex) {
            Exceptions.printStackTrace(ex);
        } catch (IllegalAccessException ex) {
            Exceptions.printStackTrace(ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Exceptions.printStackTrace(ex);
        }
        
        initComponents();
        setName(Bundle.CTL_chartingTopComponent());
        setToolTipText(Bundle.HINT_chartingTopComponent());
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);
        
        traceTable.setModel(zapCCDFChartPanel1.getTraceTableModel());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        traceTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        delTraceBtn = new javax.swing.JButton();
        snapshotBtn = new javax.swing.JButton();
        addTraceBtn = new javax.swing.JButton();
        isolateTBtn = new javax.swing.JToggleButton();
        jSlider1 = new javax.swing.JSlider();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        zapCCDFChartPanel1 = new org.core.zperf.ui.charts.ZapCCDFChartPanel("");
        jPanel2 = new javax.swing.JPanel();
        averageThoughputChartUi1 = new org.core.zperf.ui.charts.AverageThoughputChartUi();

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        traceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        traceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                traceTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(traceTable);

        org.openide.awt.Mnemonics.setLocalizedText(delTraceBtn, org.openide.util.NbBundle.getMessage(chartingTopComponent.class, "chartingTopComponent.delTraceBtn.text")); // NOI18N
        delTraceBtn.setToolTipText(org.openide.util.NbBundle.getMessage(chartingTopComponent.class, "chartingTopComponent.delTraceBtn.toolTipText")); // NOI18N
        delTraceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delTraceBtnActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(snapshotBtn, org.openide.util.NbBundle.getMessage(chartingTopComponent.class, "chartingTopComponent.snapshotBtn.text")); // NOI18N
        snapshotBtn.setToolTipText(org.openide.util.NbBundle.getMessage(chartingTopComponent.class, "chartingTopComponent.snapshotBtn.toolTipText")); // NOI18N
        snapshotBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snapshotBtnActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(addTraceBtn, org.openide.util.NbBundle.getMessage(chartingTopComponent.class, "chartingTopComponent.addTraceBtn.text")); // NOI18N
        addTraceBtn.setToolTipText(org.openide.util.NbBundle.getMessage(chartingTopComponent.class, "chartingTopComponent.addTraceBtn.toolTipText")); // NOI18N
        addTraceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTraceBtnActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(isolateTBtn, org.openide.util.NbBundle.getMessage(chartingTopComponent.class, "chartingTopComponent.isolateTBtn.text")); // NOI18N
        isolateTBtn.setToolTipText(org.openide.util.NbBundle.getMessage(chartingTopComponent.class, "chartingTopComponent.isolateTBtn.toolTipText")); // NOI18N
        isolateTBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isolateTBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addTraceBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(delTraceBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(isolateTBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(snapshotBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addTraceBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(delTraceBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(isolateTBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(snapshotBtn)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setResizeWeight(0.5);
        jSplitPane1.setContinuousLayout(true);
        jSplitPane1.setOneTouchExpandable(true);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(zapCCDFChartPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 867, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(zapCCDFChartPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(jPanel3);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(averageThoughputChartUi1, javax.swing.GroupLayout.DEFAULT_SIZE, 867, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(averageThoughputChartUi1, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
        );

        jSplitPane1.setBottomComponent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSplitPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void traceTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_traceTableMouseClicked
        if (evt.getClickCount() == 1) {
            int selectedRow = traceTable.getSelectedRow();

            selectedRow = traceTable.convertRowIndexToModel(selectedRow);
            
            zapCCDFChartPanel1.highlightTrace(selectedRow);
        }
    }//GEN-LAST:event_traceTableMouseClicked

    private void delTraceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delTraceBtnActionPerformed
        
        int selectedRow = traceTable.getSelectedRow();

        selectedRow = traceTable.convertRowIndexToModel(selectedRow);

        if (selectedRow >= 0) {
            
            zapCCDFChartPanel1.removeTrace(selectedRow);
            
        }
    }//GEN-LAST:event_delTraceBtnActionPerformed

    private void snapshotBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snapshotBtnActionPerformed
        JFileChooser zapfileChooser = new JFileChooser(System.getProperty("user.home"));
        zapfileChooser.setDialogTitle("Select zPerf working directory");
        zapfileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        zapfileChooser.setAcceptAllFileFilterUsed(false);
        zapfileChooser.setFileFilter(new CustomFileFilter(new String[]{"bmp", "gif", "jpeg", "jpg", "png"}, "image files"));
        zapfileChooser.setCurrentDirectory(new File(zapUserSettings.getWorkingFolder()));

        if (zapfileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {

            createSnapShot(zapfileChooser.getSelectedFile());

        }else {
            // do nothing I guess
        }
    }//GEN-LAST:event_snapshotBtnActionPerformed

    private void addTraceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTraceBtnActionPerformed

        final String zapFile = getZapFile();

        if (zapFile == null) {
            return;
        }

        ZapCCDFParser zapCCDFParser = new ZapCCDFParser(zapFile);

        zapCCDFChartPanel1.addNewCCDFTrace(zapCCDFParser, zapFile);
    }//GEN-LAST:event_addTraceBtnActionPerformed

    private void isolateTBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isolateTBtnActionPerformed

        if (isolateTBtn.isSelected()) {
            int[] selectedRows = traceTable.getSelectedRows();

            zapCCDFChartPanel1.isolateSelectedTrace(selectedRows);
            
        }else{
            zapCCDFChartPanel1.showAllTraces();
        }
    }//GEN-LAST:event_isolateTBtnActionPerformed

    public void setInitialCCDFTrace(ZapCCDFParser zapCCDFParser){
        zapCCDFChartPanel1.addNewCCDFTrace(zapCCDFParser, zapCCDFParser.getFileName());
    }
    
//    public void addNewCCDFTrace(ZapCCDFParser zapCCDFParser, String traceName){
//        
//        
//        List<double[]> throughputList = zapCCDFParser.getThroughput();
//        
//        List<String> traceTag = zapCCDFParser.getTraceTag();
//        
//        int traceNumber = 0;
//        
//        for (double[] throughput : throughputList) {
//            ITrace2D zapCCDFTrace = new Trace2DLtd(110);
//        
//            //zapCCDFTrace.setColor(SeriesColorGenerator.nextColor());
//            Color color = colorIterator.next();
//            
//            System.out.println(color);
//            
//            zapCCDFTrace.setColor(color);
//
//            zapCCDFTrace.setName(new File(traceName).getName() + " - "+ traceTag.get(traceNumber) + "-#" + traceNumber++);
//
//            zapCCDFChart.addTrace(zapCCDFTrace);
//            
//            double[] percentage = zapCCDFParser.getPercentage();
//
//            for (int cntr = 0; cntr < throughput.length; cntr++) {
//
//                double currentThroughput = throughput[cntr];
//
//                zapCCDFTrace.addPoint(percentage[cntr], currentThroughput);            
//            }
//
//            Vector<ITrace2D> newTrace = new Vector<ITrace2D>();
//
//            newTrace.add(zapCCDFTrace);
//            
//            traceTableModel.addRow(newTrace);
//        }
//        
//    }
    
    public void createSnapShot(File filename){
        BufferedImage snapshot = zapCCDFChartPanel1.getSnapShot(1300, 600);
        
         int dot = filename.getName().lastIndexOf(".");
     
        String ext = filename.getName().substring(dot + 1);
        try {
            ImageIO.write(snapshot, ext, filename);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }
    
    private String getZapFile(){
        JFileChooser zapfileChooser = new JFileChooser(System.getProperty("user.home"));
        zapfileChooser.setDialogTitle("Select zPerf working directory");
        zapfileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        zapfileChooser.setAcceptAllFileFilterUsed(false);
        zapfileChooser.setFileFilter(new CustomFileFilter(new String[]{"zap"}, "zap file"));
        zapfileChooser.setCurrentDirectory(new File(zapUserSettings.getWorkingFolder()));
        
        if (zapfileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
                                
            return zapfileChooser.getSelectedFile().toString();            
            
        }else {
            // do nothing I guess
        }
        
        return null;
    }
    
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTraceBtn;
    private org.core.zperf.ui.charts.AverageThoughputChartUi averageThoughputChartUi1;
    private javax.swing.JButton delTraceBtn;
    private javax.swing.JToggleButton isolateTBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton snapshotBtn;
    private javax.swing.JTable traceTable;
    private org.core.zperf.ui.charts.ZapCCDFChartPanel zapCCDFChartPanel1;
    // End of variables declaration//GEN-END:variables
    
    //private Chart2D zapCCDFChart;
    
    private String title;
    
    private ZapUserSettings zapUserSettings;
    
    //private DefaultTableModel traceTableModel;
    
    //private PointPainterDisc pointPainterDisc = new PointPainterDisc(8);
    
    private ITrace2D previouslySelectedTrace;
    
    
}
