/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.core.zperf.ui.forms;

import info.monitorenter.gui.chart.ITrace2D;
import info.monitorenter.gui.chart.ITracePoint2D;
import info.monitorenter.gui.chart.traces.Trace2DLtd;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JSpinner.DefaultEditor;
import javax.swing.JTextArea;
import javax.swing.SpinnerListModel;
import javax.swing.SpinnerModel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import org.core.zperf.CustomFileFilter;
import org.core.zperf.ZPerfUiTopComponent;
import org.core.zperf.ZapFileParser;
import org.core.zperf.ZapResult;
import org.core.zperf.ZapResultTrace;
import org.core.zperf.ZapUserSettings;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//org.core.zperf.ui.forms//charting//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "chartingTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "org.core.zperf.ui.forms.chartingTopComponent")
@ActionReference(path = "Menu/Window" , position = 333 )
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_chartingAction",
preferredID = "chartingTopComponent")
@Messages({
    "CTL_chartingAction=Charts",
    "CTL_chartingTopComponent=Charts Window",
    "HINT_chartingTopComponent=Graph your zap trace here"
})
public final class ChartingTopComponent extends TopComponent {

    public ChartingTopComponent() {
        
        this.zapUserSettings = ZPerfUiTopComponent.zapUserSettings;
        
        try {
            UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        } catch (InstantiationException ex) {
            Exceptions.printStackTrace(ex);
        } catch (IllegalAccessException ex) {
            Exceptions.printStackTrace(ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Exceptions.printStackTrace(ex);
        }
        
        UIManager.put("Slider.paintValue", false);
        
        initComponents();
        setName(Bundle.CTL_chartingTopComponent());
        setToolTipText(Bundle.HINT_chartingTopComponent());
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);
        
        traceTableModel = new DefaultTableModel(){

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        traceTableModel.addColumn("Zap trace file");
        
        traceTable.setModel(traceTableModel);
        
        List<Double> list = new ArrayList<Double>();
        
        for (double d : ZapFileParser.percentage) {
            
            list.add(d);
            
        }
        
        SpinnerModel spinModel = new SpinnerListModel(list);
        
        percentageSpinner.setModel(spinModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        isolateSelectedTraceChkBx = new javax.swing.JCheckBoxMenuItem();
        deleteSelectedTraceMenuItem = new javax.swing.JMenuItem();
        viewZapResultDetail = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        addTraceBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        percentageSpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        takeSnapshotBtn = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        traceTable = new javax.swing.JTable();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        zapCCDFChartPanel1 = new org.core.zperf.ui.charts.ZapCCDFChartPanel("");
        jPanel2 = new javax.swing.JPanel();
        averageThoughputChartUi1 = new org.core.zperf.ui.charts.AverageThoughputChartUi("");

        org.openide.awt.Mnemonics.setLocalizedText(isolateSelectedTraceChkBx, org.openide.util.NbBundle.getMessage(ChartingTopComponent.class, "ChartingTopComponent.isolateSelectedTraceChkBx.text")); // NOI18N
        isolateSelectedTraceChkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isolateSelectedTraceChkBxActionPerformed(evt);
            }
        });
        jPopupMenu1.add(isolateSelectedTraceChkBx);

        org.openide.awt.Mnemonics.setLocalizedText(deleteSelectedTraceMenuItem, org.openide.util.NbBundle.getMessage(ChartingTopComponent.class, "ChartingTopComponent.deleteSelectedTraceMenuItem.text")); // NOI18N
        deleteSelectedTraceMenuItem.setToolTipText(org.openide.util.NbBundle.getMessage(ChartingTopComponent.class, "ChartingTopComponent.deleteSelectedTraceMenuItem.toolTipText")); // NOI18N
        deleteSelectedTraceMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSelectedTraceMenuItemActionPerformed(evt);
            }
        });
        jPopupMenu1.add(deleteSelectedTraceMenuItem);

        org.openide.awt.Mnemonics.setLocalizedText(viewZapResultDetail, org.openide.util.NbBundle.getMessage(ChartingTopComponent.class, "ChartingTopComponent.viewZapResultDetail.text")); // NOI18N
        viewZapResultDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewZapResultDetailActionPerformed(evt);
            }
        });
        jPopupMenu1.add(viewZapResultDetail);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        org.openide.awt.Mnemonics.setLocalizedText(addTraceBtn, org.openide.util.NbBundle.getMessage(ChartingTopComponent.class, "ChartingTopComponent.addTraceBtn.text")); // NOI18N
        addTraceBtn.setToolTipText(org.openide.util.NbBundle.getMessage(ChartingTopComponent.class, "ChartingTopComponent.addTraceBtn.toolTipText")); // NOI18N
        addTraceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTraceBtnActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(clearBtn, org.openide.util.NbBundle.getMessage(ChartingTopComponent.class, "ChartingTopComponent.clearBtn.text")); // NOI18N
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        percentageSpinner.setToolTipText(org.openide.util.NbBundle.getMessage(ChartingTopComponent.class, "ChartingTopComponent.percentageSpinner.toolTipText")); // NOI18N
        percentageSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                percentageSpinnerStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ChartingTopComponent.class, "ChartingTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(takeSnapshotBtn, org.openide.util.NbBundle.getMessage(ChartingTopComponent.class, "ChartingTopComponent.takeSnapshotBtn.text")); // NOI18N
        takeSnapshotBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                takeSnapshotBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(percentageSpinner, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(clearBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                            .addComponent(addTraceBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1)
                            .addComponent(takeSnapshotBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addTraceBtn)
                .addGap(10, 10, 10)
                .addComponent(clearBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(takeSnapshotBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(percentageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        traceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        traceTable.setToolTipText(org.openide.util.NbBundle.getMessage(ChartingTopComponent.class, "ChartingTopComponent.traceTable.toolTipText")); // NOI18N
        traceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                traceTableMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                traceTableMousePressed(evt);
            }
        });
        traceTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                traceTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(traceTable);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setResizeWeight(0.5);
        jSplitPane1.setContinuousLayout(true);
        jSplitPane1.setOneTouchExpandable(true);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(zapCCDFChartPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 867, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(zapCCDFChartPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(jPanel3);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(averageThoughputChartUi1, javax.swing.GroupLayout.DEFAULT_SIZE, 867, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(averageThoughputChartUi1, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
        );

        jSplitPane1.setBottomComponent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void traceTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_traceTableMouseClicked
        if (evt.getClickCount() == 1 && evt.getButton() == MouseEvent.BUTTON1) {
            int selectedRow = traceTable.getSelectedRow();

            highlightTrace(selectedRow);
        }
    }//GEN-LAST:event_traceTableMouseClicked

    
    private void highlightTrace(int selectedRow){
        selectedRow = traceTable.convertRowIndexToModel(selectedRow);
            
            if (selectedRow >= 0) {
                
                ITrace2D selectedTrace = 
                        ((ZapResultTrace) traceTableModel.getValueAt(selectedRow, 0))
                        .getZapCCDFTrace();
                
                zapCCDFChartPanel1.highlightTrace(selectedTrace);
            }
    }
    
    private void deleteSelectedTrace(){
        
        int selectedRow = traceTable.getSelectedRow();

        selectedRow = traceTable.convertRowIndexToModel(selectedRow);

        if (selectedRow >= 0) {
            
            ITrace2D trace = ((ZapResultTrace) traceTableModel.getValueAt(selectedRow, 0))
                        .getZapCCDFTrace();
        
            traceTableModel.removeRow(selectedRow);

            traceTableModel.fireTableDataChanged();
            
            zapCCDFChartPanel1.removeTrace(trace);
            
        }
        
        rebuiltBarChart();
    }
    
    private void takeSnapshot(){
        
        CustomFileChooser zapfileChooser = new CustomFileChooser(new String[] {"png","jpg","bmp","gif"},
                false);
        zapfileChooser.setDialogTitle("Enter filename of image to save");
        zapfileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        zapfileChooser.setCurrentDirectory(new File(zapUserSettings.getWorkingFolder()));        
        
        if (zapfileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {

            File file = zapfileChooser.getSelectedFile();
            createSnapShot(file);

        }else {
            // do nothing I guess
        }
    }
    
    private void addTraceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTraceBtnActionPerformed

        final File[] zapFile = getZapFile();

        if (zapFile == null) {
            return;
        }

        for (File file : zapFile) {
            ZapFileParser zapCCDFParser = new ZapFileParser(file.toString());

            addTracesFromZapFile(zapCCDFParser, file.toString());

            rebuiltBarChart();
        }
        
        
    }//GEN-LAST:event_addTraceBtnActionPerformed

    private void addTracesFromZapFile(ZapFileParser zapCCDFParser, String traceName){
        
        for (ZapResult zapResult : zapCCDFParser.getZapResults()) {
            
            ITrace2D zapCCDFTrace = new Trace2DLtd(110); 
            
            zapCCDFTrace.setName(zapResult.toString());
            
            zapCCDFChartPanel1.addNewCCDFTrace(zapCCDFTrace);
            
            int percentageCntr = 0;
            
            for (Double throughput : zapResult.getThroughput()) {
                zapCCDFTrace.addPoint(ZapFileParser.percentage[percentageCntr++], throughput);
            }
            
            ZapResultTrace zapResultTrace = new ZapResultTrace(zapResult, zapCCDFTrace);
            
            Vector<ZapResultTrace> newTrace = new Vector<ZapResultTrace>();

            newTrace.add(zapResultTrace);
            
            traceTableModel.addRow(newTrace);
        }
        
        
    }
        
    private void isolateSelectedTrace(){
        
        if (isolateSelectedTraceChkBx.isSelected()) {
            
            int[] selectedRows = traceTable.getSelectedRows();

            zapCCDFChartPanel1.hideAllTraces();
            
            for (int selectedItem : selectedRows) {
            
                ITrace2D iTrace2D = ((ZapResultTrace) traceTableModel.getValueAt(selectedItem, 0))
                        .getZapCCDFTrace();
                
                iTrace2D.setVisible(true);
            }
            
            averageThoughputChartUi1.clearChart();
            
            double percentage = (Double) percentageSpinner.getValue();
            
            for (int selectedItem : selectedRows) {
                ITrace2D trace = ((ZapResultTrace) traceTableModel.getValueAt(selectedItem, 0))
                        .getZapCCDFTrace();
             
                for (Iterator<ITracePoint2D> it = trace.iterator(); it.hasNext();) {
                
                    ITracePoint2D iTracePoint2D = it.next();

                    double x = iTracePoint2D.getX();

                    if (Double.compare(x, percentage) == 0) {

                        double y = iTracePoint2D.getY();

                        averageThoughputChartUi1.addSpeed(y, trace.getName());

                        break;
                    }
                }
            }
            
        }else{
            
            zapCCDFChartPanel1.showAllTraces();
            
            rebuiltBarChart();
            
        }
    }
        
    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        
        zapCCDFChartPanel1.clearAll();
        
        averageThoughputChartUi1.clearChart();
        
        traceTableModel.getDataVector().clear();
        
        traceTableModel.fireTableDataChanged();
        
    }//GEN-LAST:event_clearBtnActionPerformed

    private void traceTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_traceTableKeyReleased
        
        int selectedRow = traceTable.getSelectedRow();
        
        if (selectedRow >= 0) {
            
            if(evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN){
                
                highlightTrace(selectedRow);
                
            }
        }
    }//GEN-LAST:event_traceTableKeyReleased

    private void traceTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_traceTableMousePressed
        
        int selectedRow = traceTable.getSelectedRow();
        
        if ( selectedRow >= 0 && evt.isPopupTrigger()) {
            
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_traceTableMousePressed

    private void isolateSelectedTraceChkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isolateSelectedTraceChkBxActionPerformed
        
        isolateSelectedTrace();
        
    }//GEN-LAST:event_isolateSelectedTraceChkBxActionPerformed

    private void deleteSelectedTraceMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelectedTraceMenuItemActionPerformed
        
        deleteSelectedTrace();
                
    }//GEN-LAST:event_deleteSelectedTraceMenuItemActionPerformed

    private void percentageSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_percentageSpinnerStateChanged
        rebuiltBarChart();
    }//GEN-LAST:event_percentageSpinnerStateChanged

    private void takeSnapshotBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_takeSnapshotBtnActionPerformed
        takeSnapshot();
    }//GEN-LAST:event_takeSnapshotBtnActionPerformed

    private void viewZapResultDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewZapResultDetailActionPerformed
        int selectedRow = traceTable.getSelectedRow();

        selectedRow = traceTable.convertRowIndexToModel(selectedRow);

        if (selectedRow >= 0) {
            
            ZapResultTrace zapResultTrace = ((ZapResultTrace) traceTableModel.getValueAt(selectedRow, 0));
                        
            ZapResult zapResult = zapResultTrace.getZapResult();
            
            JTextArea textArea = new JTextArea(zapResult.getDetail());
            
            JOptionPane.showMessageDialog(this, textArea, "Zap result detail", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_viewZapResultDetailActionPerformed

    private void rebuiltBarChart(){
        
        double percentage = (Double) percentageSpinner.getValue();
        

        for (Object e : 
                traceTableModel.getDataVector()) {
            
            @SuppressWarnings("unchecked")
            ITrace2D trace = ((Vector<ZapResultTrace>) e).get(0).getZapCCDFTrace();
                  
            for (Iterator<ITracePoint2D> it = trace.iterator(); it.hasNext();) {
                
                ITracePoint2D iTracePoint2D = it.next();
                
                double xAxis = iTracePoint2D.getX();
                
                if (Double.compare(xAxis, percentage) == 0) {
                    
                    double yAxis = iTracePoint2D.getY();
                    
                    averageThoughputChartUi1.addSpeed(yAxis, trace.getName());
                    
                    break;
                }
            }
            
        }
        
        averageThoughputChartUi1.setTitle(percentage);
        
    }
    
    
    public void createSnapShot(File filename){
        
        JSpinner width = new JSpinner(new javax.swing.SpinnerNumberModel(1300, 0, 1920, 1));
        JSpinner height = new JSpinner(new javax.swing.SpinnerNumberModel(800, 0, 1920, 1));
        
        JPanel panel = new JPanel();
        panel.setPreferredSize(new Dimension(250,25));
        panel.add(new JLabel("X:"));
        panel.add(width);
        panel.add(new JLabel("Y:"));
        panel.add(height);
        
        JOptionPane.showMessageDialog(this, panel, "Enter dimension", JOptionPane.QUESTION_MESSAGE);
                
        BufferedImage snapshot = zapCCDFChartPanel1.getSnapShot(getSelectedValue(width), getSelectedValue(height));
        
         int dot = filename.getName().lastIndexOf(".");
     
        String ext = filename.getName().substring(dot + 1);
        
        System.out.println("" + filename);
        
        try {
            ImageIO.write(snapshot, ext, filename);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }
    
    private int getSelectedValue(JSpinner spinner){
        try {
            spinner.commitEdit();            
        }
        catch (ParseException pe) {
            JComponent editor = spinner.getEditor();
            if (editor instanceof DefaultEditor) {
                ((DefaultEditor)editor).getTextField().setValue(spinner.getValue());
            }
            // reset the value to some known value:
            spinner.setValue(1300);            
       }
        
       return Integer.parseInt(spinner.getValue().toString());
    }
    
    private File[] getZapFile(){
        JFileChooser zapfileChooser = new JFileChooser(System.getProperty("user.home"));
        zapfileChooser.setDialogTitle("Select zPerf working directory");
        zapfileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        zapfileChooser.setAcceptAllFileFilterUsed(false);
        zapfileChooser.setMultiSelectionEnabled(true);
        zapfileChooser.setFileFilter(new CustomFileFilter(new String[]{"zap"}, "zap file"));
        zapfileChooser.setCurrentDirectory(new File(zapUserSettings.getWorkingFolder()));
        
        if (zapfileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
                                
            return zapfileChooser.getSelectedFiles();            
            
        }else {
            // do nothing I guess
        }
        
        return null;
    }
    
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTraceBtn;
    private org.core.zperf.ui.charts.AverageThoughputChartUi averageThoughputChartUi1;
    private javax.swing.JButton clearBtn;
    private javax.swing.JMenuItem deleteSelectedTraceMenuItem;
    private javax.swing.JCheckBoxMenuItem isolateSelectedTraceChkBx;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSpinner percentageSpinner;
    private javax.swing.JButton takeSnapshotBtn;
    private javax.swing.JTable traceTable;
    private javax.swing.JMenuItem viewZapResultDetail;
    private org.core.zperf.ui.charts.ZapCCDFChartPanel zapCCDFChartPanel1;
    // End of variables declaration//GEN-END:variables
    
    //private Chart2D zapCCDFChart;
    
    private String title;
    
    private ZapUserSettings zapUserSettings;
    
    //private DefaultTableModel traceTableModel;
    
    //private PointPainterDisc pointPainterDisc = new PointPainterDisc(8);
    
    //private ITrace2D previouslySelectedTrace;
    
    private DefaultTableModel traceTableModel;
    
    
}
