/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.core.zperf;

import java.text.DateFormat;
import java.text.ParseException;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JSpinner;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.core.zperf.zap.Measurement;
import org.core.zperf.zap.MeasurementEvent;
import org.core.zperf.zap.MeasurementListener;
import org.core.zperf.zap.ZapParameters;
import org.core.zperf.zap.ZapThread;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.StatusDisplayer;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.IOProvider;
import org.openide.windows.InputOutput;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//org.core.zperf//zPerfUI//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "zPerfUITopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "org.core.zperf.ui.zPerfUITopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_zPerfUIAction",
preferredID = "zPerfUITopComponent")
@Messages({
    "CTL_zPerfUIAction=zPerfUI",
    "CTL_zPerfUITopComponent=zPerfUI Window",
    "HINT_zPerfUITopComponent=This is a zPerfUI window"
})
public final class ZPerfUiTopComponent extends TopComponent {

    public ZPerfUiTopComponent() {
        
        try {
            UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        } catch (InstantiationException ex) {
            Exceptions.printStackTrace(ex);
        } catch (IllegalAccessException ex) {
            Exceptions.printStackTrace(ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Exceptions.printStackTrace(ex);
        }
        
        // pattern by mkyong.com
        ipmask = new RegexFormatter(
                  "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])"
                + "\\."
                + "([01]?\\d\\d?|2[0-4]\\d|25[0-5])"
                + "\\."
                + "([01]?\\d\\d?|2[0-4]\\d|25[0-5])"
                + "\\."
                + "([01]?\\d\\d?|2[0-4]\\d|25[0-5])$");
        
        hexmask = new RegexFormatter(
                "0x[0-9a-f]{1,2}");
        
        parameters = new ZapParameters(zapUserSettings.getWorkingFolder());
        
        initComponents();
                
        setName(Bundle.CTL_zPerfUITopComponent());
        setToolTipText(Bundle.HINT_zPerfUITopComponent());
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE); 
        
        srcAddressFtf.setValue(zapUserSettings.getSrcAddress());
        
        parameters.setSrcAddress(zapUserSettings.getSrcAddress());
        
        dstAddressFtf.setValue(zapUserSettings.getDstAddress());
        
        parameters.setDstAddress(zapUserSettings.getDstAddress());
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        zPerfChartUi1 = new org.core.zperf.ui.charts.ZPerfMainChartUi("");
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        secondsSpn = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        runBtn = new javax.swing.JButton();
        invertConnectionChkBx = new javax.swing.JCheckBox();
        swapSrcDstChkBox = new javax.swing.JCheckBox();
        stopBtn = new javax.swing.JButton();
        srcAddressFtf = new javax.swing.JFormattedTextField(ipmask);
        dstAddressFtf = new javax.swing.JFormattedTextField(ipmask);
        jLabel14 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jXTaskPane1 = new org.jdesktop.swingx.JXTaskPane();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        framesSpn = new javax.swing.JSpinner();
        payloadLengthSpn = new javax.swing.JSpinner();
        sampleSizeRdoBtn = new javax.swing.JRadioButton();
        periodRdoBtn = new javax.swing.JRadioButton();
        sampleSizeSpn = new javax.swing.JSpinner();
        periodSpn = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        numberOfSampleSpn = new javax.swing.JSpinner();
        outstandingSpn = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        averageThroughputSpn = new javax.swing.JSpinner();
        srcControllerAddressFtf = new javax.swing.JFormattedTextField(ipmask);
        dstControllerAddressFtf = new javax.swing.JFormattedTextField(ipmask);
        multicastControllerAddressFtf = new javax.swing.JFormattedTextField(ipmask);
        tosBitsFtf = new javax.swing.JFormattedTextField(hexmask);
        jLabel13 = new javax.swing.JLabel();
        transmitRateSpn = new javax.swing.JSpinner();
        logRawOutputChkBx = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        jXTaskPane3 = new org.jdesktop.swingx.JXTaskPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tagTa = new javax.swing.JTextArea();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        subTagTa = new javax.swing.JTextArea();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        noteTa = new javax.swing.JTextArea();
        commandlineTf = new javax.swing.JFormattedTextField();

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.jLabel1.text")); // NOI18N

        secondsSpn.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(10), Integer.valueOf(1), null, Integer.valueOf(1)));
        secondsSpn.setToolTipText(org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.secondsSpn.toolTipText")); // NOI18N
        secondsSpn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                secondsSpnStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(runBtn, org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.runBtn.text")); // NOI18N
        runBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runBtnActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(invertConnectionChkBx, org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.invertConnectionChkBx.text")); // NOI18N
        invertConnectionChkBx.setToolTipText(org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.invertConnectionChkBx.toolTipText")); // NOI18N
        invertConnectionChkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invertConnectionChkBxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(swapSrcDstChkBox, org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.swapSrcDstChkBox.text")); // NOI18N
        swapSrcDstChkBox.setToolTipText(org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.swapSrcDstChkBox.toolTipText")); // NOI18N
        swapSrcDstChkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                swapSrcDstChkBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(stopBtn, org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.stopBtn.text")); // NOI18N
        stopBtn.setEnabled(false);
        stopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBtnActionPerformed(evt);
            }
        });

        srcAddressFtf.setText(org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.srcAddressFtf.text")); // NOI18N
        srcAddressFtf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                srcAddressFtfFocusLost(evt);
            }
        });

        dstAddressFtf.setText(org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.dstAddressFtf.text")); // NOI18N
        dstAddressFtf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dstAddressFtfFocusLost(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel14, org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.jLabel14.text")); // NOI18N

        jTextField1.setColumns(20);
        jTextField1.setText(org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.jTextField1.text")); // NOI18N
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(srcAddressFtf, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dstAddressFtf)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(invertConnectionChkBx, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(swapSrcDstChkBox, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                    .addComponent(secondsSpn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(runBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                    .addComponent(stopBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(secondsSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(invertConnectionChkBx)
                    .addComponent(srcAddressFtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(runBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(swapSrcDstChkBox)
                    .addComponent(stopBtn)
                    .addComponent(dstAddressFtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.setLayout(new org.jdesktop.swingx.VerticalLayout());

        jXTaskPane1.setAnimated(false);
        jXTaskPane1.setCollapsed(true);
        jXTaskPane1.setTitle(org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.jXTaskPane1.title")); // NOI18N

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.jLabel6.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.jLabel7.text")); // NOI18N

        framesSpn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                framesSpnStateChanged(evt);
            }
        });

        payloadLengthSpn.setModel(new javax.swing.SpinnerNumberModel(1472, 0, 1472, 1));
        payloadLengthSpn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                payloadLengthSpnStateChanged(evt);
            }
        });

        buttonGroup1.add(sampleSizeRdoBtn);
        org.openide.awt.Mnemonics.setLocalizedText(sampleSizeRdoBtn, org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.sampleSizeRdoBtn.text")); // NOI18N

        buttonGroup1.add(periodRdoBtn);
        periodRdoBtn.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(periodRdoBtn, org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.periodRdoBtn.text")); // NOI18N

        sampleSizeSpn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sampleSizeSpnStateChanged(evt);
            }
        });

        periodSpn.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(50000), Integer.valueOf(1), null, Integer.valueOf(1)));
        periodSpn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                periodSpnStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.jLabel8.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.jLabel9.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.jLabel10.text")); // NOI18N

        numberOfSampleSpn.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(1000000L), Long.valueOf(0L), null, Long.valueOf(1L)));
        numberOfSampleSpn.setToolTipText(org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.numberOfSampleSpn.toolTipText")); // NOI18N
        numberOfSampleSpn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                numberOfSampleSpnStateChanged(evt);
            }
        });

        outstandingSpn.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        outstandingSpn.setToolTipText(org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.outstandingSpn.toolTipText")); // NOI18N
        outstandingSpn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                outstandingSpnStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel11, org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.jLabel11.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.jLabel12.text")); // NOI18N

        averageThroughputSpn.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        averageThroughputSpn.setToolTipText(org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.averageThroughputSpn.toolTipText")); // NOI18N
        averageThroughputSpn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                averageThroughputSpnStateChanged(evt);
            }
        });

        srcControllerAddressFtf.setText(org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.srcControllerAddressFtf.text")); // NOI18N
        srcControllerAddressFtf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                srcControllerAddressFtfFocusLost(evt);
            }
        });

        dstControllerAddressFtf.setText(org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.dstControllerAddressFtf.text")); // NOI18N
        dstControllerAddressFtf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dstControllerAddressFtfFocusLost(evt);
            }
        });

        multicastControllerAddressFtf.setText(org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.multicastControllerAddressFtf.text")); // NOI18N
        multicastControllerAddressFtf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                multicastControllerAddressFtfFocusLost(evt);
            }
        });

        tosBitsFtf.setText(org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.tosBitsFtf.text")); // NOI18N
        tosBitsFtf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tosBitsFtfFocusLost(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel13, org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.jLabel13.text")); // NOI18N

        transmitRateSpn.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        transmitRateSpn.setToolTipText(org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.transmitRateSpn.toolTipText")); // NOI18N
        transmitRateSpn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                transmitRateSpnStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(logRawOutputChkBx, org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.logRawOutputChkBx.text")); // NOI18N
        logRawOutputChkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logRawOutputChkBxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(srcControllerAddressFtf, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel10)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dstControllerAddressFtf, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(multicastControllerAddressFtf, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tosBitsFtf, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sampleSizeRdoBtn)
                    .addComponent(periodRdoBtn)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(periodSpn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                            .addComponent(numberOfSampleSpn, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sampleSizeSpn))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel7))
                                .addGap(46, 46, 46)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(framesSpn)
                                    .addComponent(payloadLengthSpn, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(18, 18, 18)
                                .addComponent(outstandingSpn, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(logRawOutputChkBx))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(transmitRateSpn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(averageThroughputSpn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(sampleSizeRdoBtn)
                            .addComponent(sampleSizeSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(srcControllerAddressFtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(periodRdoBtn)
                            .addComponent(periodSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dstControllerAddressFtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(numberOfSampleSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(multicastControllerAddressFtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(outstandingSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(averageThroughputSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(payloadLengthSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(framesSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel13)
                                .addComponent(transmitRateSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tosBitsFtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(logRawOutputChkBx))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jXTaskPane1.getContentPane().add(jPanel4);

        jPanel10.add(jXTaskPane1);

        jPanel9.setLayout(new org.jdesktop.swingx.VerticalLayout());

        jXTaskPane3.setAnimated(false);
        jXTaskPane3.setCollapsed(true);
        jXTaskPane3.setTitle(org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.jXTaskPane3.title")); // NOI18N

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.jPanel6.border.title"))); // NOI18N

        tagTa.setColumns(20);
        tagTa.setRows(5);
        tagTa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tagTaFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(tagTa);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.jPanel7.border.title"))); // NOI18N

        subTagTa.setColumns(20);
        subTagTa.setRows(5);
        subTagTa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                subTagTaFocusLost(evt);
            }
        });
        jScrollPane2.setViewportView(subTagTa);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.jPanel8.border.title"))); // NOI18N

        noteTa.setColumns(20);
        noteTa.setRows(5);
        noteTa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                noteTaFocusLost(evt);
            }
        });
        jScrollPane3.setViewportView(noteTa);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
        );

        commandlineTf.setText(org.openide.util.NbBundle.getMessage(ZPerfUiTopComponent.class, "ZPerfUiTopComponent.commandlineTf.text")); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(commandlineTf)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(commandlineTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jXTaskPane3.getContentPane().add(jPanel5);

        jPanel9.add(jXTaskPane3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(zPerfChartUi1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(zPerfChartUi1, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void getUserPreferredWorkingDirectory(){
        
        JFileChooser directoryChooser = new JFileChooser(System.getProperty("user.home"));
        
        directoryChooser.setDialogTitle("Select zPerf working directory");
        
        directoryChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        directoryChooser.setAcceptAllFileFilterUsed(false);
        
        if (directoryChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
            
            zapUserSettings.setWorkingFolder(directoryChooser.getSelectedFile().toString());
            
        }else {
            System.out.println("No Selection ");
        }
    }
    
    
    private void runBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runBtnActionPerformed

        io = IOProvider.getDefault().getIO("Session " 
                + DateFormat.getDateTimeInstance(
                DateFormat.SHORT, DateFormat.SHORT).format(new Date()), 
                true);
        
        if(zapUserSettings.getWorkingFolder().isEmpty()){
            getUserPreferredWorkingDirectory();
        }
        
        if(!parameters.isMinimumRequiredOptionSet()){
            StatusDisplayer.getDefault().setStatusText("Insufficient Options, check input");             
        }
        
        zapUserSettings.setSrcAddress(parameters.getSrcAddress());
        
        zapUserSettings.setDstAddress(parameters.getDstAddress());
        
        zapUserSettings.savePreferences();        
        
        zPerfChartUi1.clearAllTraces();
                       
        zperf = new ZapThread(
                parameters, this);
        
        zperf.getZapStreamResult().addEventListener(new MeasurementListener() {

            @Override
            public void measurementAdded(MeasurementEvent evt) {
                
                zPerfChartUi1.addNewMeasurementToTrace((Measurement) evt.getSource());
                
            }
        });
        
        zperf.start();
        
    }//GEN-LAST:event_runBtnActionPerformed

    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        if(zperf != null){
            zperf.quit();
        }
    }//GEN-LAST:event_stopBtnActionPerformed

    private void logRawOutputChkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logRawOutputChkBxActionPerformed
        if (logRawOutputChkBx.isSelected()) {
            enableRawLogging = true;
        }else{
            enableRawLogging = false;
        }
    }//GEN-LAST:event_logRawOutputChkBxActionPerformed

    private void srcAddressFtfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_srcAddressFtfFocusLost
        try {
            ((JFormattedTextField) evt.getSource()).commitEdit();
        } catch (ParseException ex) {
            
        }
        
        if (((JFormattedTextField) evt.getSource()).isEditValid() 
                && ((JFormattedTextField) evt.getSource()).getValue() != null) {
            
            parameters.setSrcAddress(
                    ((JFormattedTextField) evt.getSource()).getValue().toString());
            
            commandlineTf.setValue(parameters.getParameters());
        }
        
    }//GEN-LAST:event_srcAddressFtfFocusLost

    private void dstAddressFtfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dstAddressFtfFocusLost
        
        try {
            ((JFormattedTextField) evt.getSource()).commitEdit();
        } catch (ParseException ex) {
            
        }
        
        if (((JFormattedTextField) evt.getSource()).isEditValid() 
                && ((JFormattedTextField) evt.getSource()).getValue() != null) {
            
            parameters.setDstAddress(
                    ((JFormattedTextField) evt.getSource()).getValue().toString());
            
            commandlineTf.setValue(parameters.getParameters());
        }
        
    }//GEN-LAST:event_dstAddressFtfFocusLost

    private void invertConnectionChkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invertConnectionChkBxActionPerformed
        
        parameters.setInvertConnection(invertConnectionChkBx.isSelected());
        
        commandlineTf.setValue(parameters.getParameters());
    }//GEN-LAST:event_invertConnectionChkBxActionPerformed

    private void swapSrcDstChkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_swapSrcDstChkBoxActionPerformed
        
        parameters.setSwapSourceAndDestination(swapSrcDstChkBox.isSelected());
        
        commandlineTf.setValue(parameters.getParameters());
    }//GEN-LAST:event_swapSrcDstChkBoxActionPerformed

    private void secondsSpnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_secondsSpnStateChanged
        
        parameters.setSecondsToRun(new Long(secondsSpn.getValue().toString()));
        
        commandlineTf.setValue(parameters.getParameters());
    }//GEN-LAST:event_secondsSpnStateChanged

    private void srcControllerAddressFtfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_srcControllerAddressFtfFocusLost
        
        try {
            ((JFormattedTextField) evt.getSource()).commitEdit();
        } catch (ParseException ex) {
            
        }
        
        if (((JFormattedTextField) evt.getSource()).isEditValid() 
                && ((JFormattedTextField) evt.getSource()).getValue() != null) {
            
            parameters.setSrcControllerAddress(
                    ((JFormattedTextField) evt.getSource()).getValue().toString());
            
            commandlineTf.setValue(parameters.getParameters());
        }
                
    }//GEN-LAST:event_srcControllerAddressFtfFocusLost

    private void dstControllerAddressFtfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dstControllerAddressFtfFocusLost
        try {
            ((JFormattedTextField) evt.getSource()).commitEdit();
        } catch (ParseException ex) {
            
        }
        
        if (((JFormattedTextField) evt.getSource()).isEditValid() 
                && ((JFormattedTextField) evt.getSource()).getValue() != null) {
            
            parameters.setDstControllerAddress(
                    ((JFormattedTextField) evt.getSource()).getValue().toString());
            
            commandlineTf.setValue(parameters.getParameters());
        }
        
    }//GEN-LAST:event_dstControllerAddressFtfFocusLost

    private void multicastControllerAddressFtfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_multicastControllerAddressFtfFocusLost
        try {
            ((JFormattedTextField) evt.getSource()).commitEdit();
        } catch (ParseException ex) {
            
        }
        
        if (((JFormattedTextField) evt.getSource()).isEditValid() 
                && ((JFormattedTextField) evt.getSource()).getValue() != null) {
            
            parameters.setMulticastAddress(
                    ((JFormattedTextField) evt.getSource()).getValue().toString());
            
            commandlineTf.setValue(parameters.getParameters());
        }
        
    }//GEN-LAST:event_multicastControllerAddressFtfFocusLost

    private void periodSpnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_periodSpnStateChanged
        
        if (periodRdoBtn.isSelected()) {
         
            parameters.setPeriod(new Long(periodSpn.getValue().toString()));
            
            commandlineTf.setValue(parameters.getParameters());
        }
    }//GEN-LAST:event_periodSpnStateChanged

    private void sampleSizeSpnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sampleSizeSpnStateChanged
        
        if (sampleSizeRdoBtn.isSelected()) {
            
            parameters.setSampleSize(new Long(sampleSizeSpn.getValue().toString()));
            
            commandlineTf.setValue(parameters.getParameters());
        }
    }//GEN-LAST:event_sampleSizeSpnStateChanged

    private void numberOfSampleSpnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_numberOfSampleSpnStateChanged
        
        parameters.setNumberOfSamples(new Long(((JSpinner)evt.getSource()).getValue().toString()));
        
        commandlineTf.setValue(parameters.getParameters());
    }//GEN-LAST:event_numberOfSampleSpnStateChanged

    private void tosBitsFtfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tosBitsFtfFocusLost
        
        try {
            ((JFormattedTextField) evt.getSource()).commitEdit();
        } catch (ParseException ex) {
            
        }
        
        if (((JFormattedTextField) evt.getSource()).isEditValid() 
                && ((JFormattedTextField) evt.getSource()).getValue() != null) {
            
            parameters.setTosBits(
                    ((JFormattedTextField) evt.getSource()).getValue().toString());
            
            commandlineTf.setValue(parameters.getParameters());
        }
    }//GEN-LAST:event_tosBitsFtfFocusLost

    private void payloadLengthSpnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_payloadLengthSpnStateChanged
        
        parameters.setPayloadLength(new Long(((JSpinner)evt.getSource()).getValue().toString()));
        
        commandlineTf.setValue(parameters.getParameters());
        
    }//GEN-LAST:event_payloadLengthSpnStateChanged

    private void framesSpnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_framesSpnStateChanged
        
        parameters.setFrameLength(new Long(((JSpinner)evt.getSource()).getValue().toString()));
        
        commandlineTf.setValue(parameters.getParameters());
        
    }//GEN-LAST:event_framesSpnStateChanged

    private void outstandingSpnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_outstandingSpnStateChanged
        
        parameters.setOutstanding(new Long(((JSpinner)evt.getSource()).getValue().toString()));
        
        commandlineTf.setValue(parameters.getParameters());
        
    }//GEN-LAST:event_outstandingSpnStateChanged

    private void averageThroughputSpnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_averageThroughputSpnStateChanged
        
        parameters.setAverageValueOfThroughput(new Long(((JSpinner)evt.getSource()).getValue().toString()));
        
        commandlineTf.setValue(parameters.getParameters());
        
    }//GEN-LAST:event_averageThroughputSpnStateChanged

    private void transmitRateSpnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_transmitRateSpnStateChanged
        
        parameters.setTransmitRate(new Long(((JSpinner)evt.getSource()).getValue().toString()));
        
        commandlineTf.setValue(parameters.getParameters());
        
    }//GEN-LAST:event_transmitRateSpnStateChanged

    private void tagTaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tagTaFocusLost
        
        String message = ((JTextArea)evt.getSource()).getText().trim();
        
        if (!message.isEmpty()) {
            
            parameters.setTag(message);
            
            commandlineTf.setValue(parameters.getParameters());
        }
    }//GEN-LAST:event_tagTaFocusLost

    private void subTagTaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_subTagTaFocusLost
        
        String message = ((JTextArea)evt.getSource()).getText().trim();
        
        if (!message.isEmpty()) {
        
            parameters.setSubTag(message);
            
            commandlineTf.setValue(parameters.getParameters());
        }
    }//GEN-LAST:event_subTagTaFocusLost

    private void noteTaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_noteTaFocusLost
        
        String message = ((JTextArea)evt.getSource()).getText().trim();
        
        if (!message.isEmpty()) {
            
            parameters.setNote(message);
            
            commandlineTf.setValue(parameters.getParameters());
        }
    }//GEN-LAST:event_noteTaFocusLost

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost
        
        String filename = ((JTextField)evt.getSource()).getText();
        
        if (filename != null && !filename.isEmpty()) {
            
            parameters.setResultFilename(filename.trim());
            
            commandlineTf.setValue(parameters.getParameters());
        }
    }//GEN-LAST:event_jTextField1FocusLost

    public static void appendOptionalToOutput(String message){
        
        if (enableRawLogging) {
            io.getOut().println(message);
        }
    }
    
    public static void appendToOutput(String message){
        
        io.getOut().println(message);
        
    }
    
    public static void appendToError(String message){
        
        io.getOut().println(message);
        
    }
    
    public void setStartedStatus(){
        runBtn.setEnabled(false);
        
        stopBtn.setEnabled(true);
    }
    
    public void setStoppedStatus(){
        
        runBtn.setEnabled(true);
        
        stopBtn.setEnabled(false);
    }
    
    public ZapUserSettings getSettings(){
        return zapUserSettings;
    }
    
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner averageThroughputSpn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JFormattedTextField commandlineTf;
    private javax.swing.JFormattedTextField dstAddressFtf;
    private javax.swing.JFormattedTextField dstControllerAddressFtf;
    private javax.swing.JSpinner framesSpn;
    private javax.swing.JCheckBox invertConnectionChkBx;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    private org.jdesktop.swingx.JXTaskPane jXTaskPane1;
    private org.jdesktop.swingx.JXTaskPane jXTaskPane3;
    private javax.swing.JCheckBox logRawOutputChkBx;
    private javax.swing.JFormattedTextField multicastControllerAddressFtf;
    private javax.swing.JTextArea noteTa;
    private javax.swing.JSpinner numberOfSampleSpn;
    private javax.swing.JSpinner outstandingSpn;
    private javax.swing.JSpinner payloadLengthSpn;
    private javax.swing.JRadioButton periodRdoBtn;
    private javax.swing.JSpinner periodSpn;
    private javax.swing.JButton runBtn;
    private javax.swing.JRadioButton sampleSizeRdoBtn;
    private javax.swing.JSpinner sampleSizeSpn;
    private javax.swing.JSpinner secondsSpn;
    private javax.swing.JFormattedTextField srcAddressFtf;
    private javax.swing.JFormattedTextField srcControllerAddressFtf;
    private javax.swing.JButton stopBtn;
    private javax.swing.JTextArea subTagTa;
    private javax.swing.JCheckBox swapSrcDstChkBox;
    private javax.swing.JTextArea tagTa;
    private javax.swing.JFormattedTextField tosBitsFtf;
    private javax.swing.JSpinner transmitRateSpn;
    private org.core.zperf.ui.charts.ZPerfMainChartUi zPerfChartUi1;
    // End of variables declaration//GEN-END:variables
    
    
    private String logFile = "";
    
    private ZapThread zperf;
    
    private static InputOutput io;
    
    private static boolean enableRawLogging = false;
    
    private RegexFormatter ipmask, hexmask;
    
    public static ZapUserSettings zapUserSettings = new ZapUserSettings();
    
    public static ZapParameters parameters;
    
}
