/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.core.zperf;

import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

final class StartupdefaultsPanel extends javax.swing.JPanel implements DocumentListener{

    private final StartupdefaultsOptionsPanelController controller;

    StartupdefaultsPanel(StartupdefaultsOptionsPanelController controller) {
        this.controller = controller;
        
        ipmask = new RegexFormatter(
            "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])"
          + "\\."
          + "([01]?\\d\\d?|2[0-4]\\d|25[0-5])"
          + "\\."
          + "([01]?\\d\\d?|2[0-4]\\d|25[0-5])"
          + "\\."
          + "([01]?\\d\\d?|2[0-4]\\d|25[0-5])$");
        
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
        workingDirectoryTf.getDocument().addDocumentListener(this);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        workingDirectoryTf = new javax.swing.JTextField();
        browseBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        srcAddressFtf = new javax.swing.JFormattedTextField(ipmask);
        dstAddressFtf = new javax.swing.JFormattedTextField(ipmask);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(StartupdefaultsPanel.class, "StartupdefaultsPanel.jLabel1.text")); // NOI18N

        workingDirectoryTf.setEditable(false);
        workingDirectoryTf.setText(org.openide.util.NbBundle.getMessage(StartupdefaultsPanel.class, "StartupdefaultsPanel.workingDirectoryTf.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browseBtn, org.openide.util.NbBundle.getMessage(StartupdefaultsPanel.class, "StartupdefaultsPanel.browseBtn.text")); // NOI18N
        browseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtnActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(StartupdefaultsPanel.class, "StartupdefaultsPanel.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(StartupdefaultsPanel.class, "StartupdefaultsPanel.jLabel3.text")); // NOI18N

        srcAddressFtf.setText(org.openide.util.NbBundle.getMessage(StartupdefaultsPanel.class, "StartupdefaultsPanel.srcAddressFtf.text")); // NOI18N

        dstAddressFtf.setText(org.openide.util.NbBundle.getMessage(StartupdefaultsPanel.class, "StartupdefaultsPanel.dstAddressFtf.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(workingDirectoryTf, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                    .addComponent(srcAddressFtf)
                    .addComponent(dstAddressFtf))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(browseBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(workingDirectoryTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(srcAddressFtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(dstAddressFtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtnActionPerformed
        getUserPreferredWorkingDirectory();
    }//GEN-LAST:event_browseBtnActionPerformed
    
    @Override
    public void insertUpdate(DocumentEvent arg0) {
      controller.changed();
    }

    @Override
    public void removeUpdate(DocumentEvent arg0) {
      controller.changed();
    }

    @Override
    public void changedUpdate(DocumentEvent arg0) {
      controller.changed();
    }
    
    void load() {
        // TODO read settings and initialize GUI
        // Example:        
        // someCheckBox.setSelected(Preferences.userNodeForPackage(StartupdefaultsPanel.class).getBoolean("someFlag", false));
        // or for org.openide.util with API spec. version >= 7.4:
        // someCheckBox.setSelected(NbPreferences.forModule(StartupdefaultsPanel.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
        workingDirectoryTf.setText(
                fPrefs.get(ZapUserSettings.WORKING_FOLDER, "./"));
        srcAddressFtf.setText(
                fPrefs.get(ZapUserSettings.SRC_ADDRESS, ""));
        dstAddressFtf.setText(
                fPrefs.get(ZapUserSettings.DST_ADDRESS, ""));
    }

    void store() {
        // TODO store modified settings
        // Example:
        // Preferences.userNodeForPackage(StartupdefaultsPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or for org.openide.util with API spec. version >= 7.4:
        // NbPreferences.forModule(StartupdefaultsPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
                
        fPrefs.put(ZapUserSettings.WORKING_FOLDER, workingDirectoryTf.getText());
        fPrefs.put(ZapUserSettings.SRC_ADDRESS, srcAddressFtf.getText());
        fPrefs.put(ZapUserSettings.DST_ADDRESS, dstAddressFtf.getText());
        
    }

    boolean valid() {
        
      if(workingDirectoryTf.getText().length() == 0) {
         return false;
      } else {
         return true;
      }
    }
    
    
    
    private void getUserPreferredWorkingDirectory(){
        JFileChooser directoryChooser = new JFileChooser(System.getProperty("user.home"));
        directoryChooser.setDialogTitle("Select zPerf working directory");
        directoryChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        directoryChooser.setAcceptAllFileFilterUsed(false);
        
        if (directoryChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
            workingDirectoryTf.setText(directoryChooser.getSelectedFile().toString());
            //zapUserSettings.savePreferences();
        }else {
            System.out.println("No Selection ");
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseBtn;
    private javax.swing.JFormattedTextField dstAddressFtf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JFormattedTextField srcAddressFtf;
    private javax.swing.JTextField workingDirectoryTf;
    // End of variables declaration//GEN-END:variables

    private Preferences fPrefs = Preferences.userNodeForPackage(ZapUserSettings.class);
        
    private RegexFormatter ipmask;
}
